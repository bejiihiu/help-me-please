const express = require("express");
const helmet = require("helmet");
const fs = require("fs/promises");
const { webhookPath, env } = require("./config");
const Notifier = require("./utils/Notifier");
const Database = require("./services/Database");
const Scheduler = require("./services/Scheduler");
const setupBot = require("./bot/bot");
const { GoogleGenAI } = require("@google/genai");
const mongoose = require("mongoose");

class App {
  constructor() {
    this.lastCheckTime = Date.now();
    this.app = express();
    this.server = null;
    this.scheduler = null;
    this.schedulerHealthInterval = null;
    this.model = null;
    this.bot = null;
    this.sendCommandRegistered = false;
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ –º–µ—Ç–æ–¥–∞
  static logStart(methodName) {
    Notifier.log(`[DEBUG] –ù–∞—á–∞–ª–æ ${methodName}`);
  }

  static logEnd(methodName) {
    Notifier.log(`[DEBUG] –ú–µ—Ç–æ–¥ ${methodName} –∑–∞–≤–µ—Ä—à—ë–Ω.`);
  }

  static async safeExecute(methodName, fn) {
    App.logStart(methodName);
    try {
      return await fn();
    } catch (error) {
      await Notifier.error(error, { module: methodName });
      throw error;
    } finally {
      App.logEnd(methodName);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
  async initializeModel() {
    return App.safeExecute("App.initializeModel", async () => {
      Notifier.log("[INFO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏...");
      if (!env.GEMINI_KEY) {
        throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á GEMINI_KEY –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
      }
      this.model = new GoogleGenAI({ apiKey: env.GEMINI_KEY });
      Notifier.log("[INFO] –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ health- –∏ force‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  setupHealthEndpoint() {
    this.app.get("/", async (req, res) => {
      try {
        if (Date.now() - this.lastCheckTime < 15 * 60 * 1000) {
          return res.status(200).send("OK");
        }
        if (this.scheduler) {
          const health = await this.scheduler.checkHealth();
          return res.status(200).send(health ? "OK" : "Service Unavailable");
        }
        return res.status(500).send("Scheduler is not initialized");
      } catch (error) {
        await Notifier.error(error, { module: "App.healthCheck" });
        return res.status(500).send("Error in health-check");
      } finally {
        this.lastCheckTime = Date.now();
      }
    });
  }

  setupForceEndpoint() {
    this.app.get("/force", async (req, res) => {
      try {
        await this.scheduler.forcePost(env.TELEGRAM_CHANNEL_ID);
        return res.status(200).send("OK");
      } catch (error) {
        await Notifier.error(error, { module: "App.forceEndpoint" });
        return res.status(500).send("Error in force endpoint");
      }
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
  async initializeExpress() {
    return App.safeExecute("App.initializeExpress", async () => {
      this.app.use(express.json());
      this.app.use(helmet());
      this.setupHealthEndpoint();
      this.setupForceEndpoint();
      Notifier.log("[INFO] Express –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å helmet –∏ health-check endpoint.");
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram‚Äë–±–æ—Ç–∞
  async initializeBot() {
    return App.safeExecute("App.initializeBot", async () => {
      this.bot = setupBot(this);
      if (!this.bot || typeof this.bot.webhookCallback !== "function") {
        throw new Error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
      }
      this.app.use(this.bot.webhookCallback(webhookPath));
      Notifier.log("[INFO] Telegraf –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Express.");
    });
  }

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  async startServer() {
    return App.safeExecute("App.startServer", async () => {
      Notifier.log("[INFO] –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
      await Database.connect();
      await this.initializeModel();
      await this.initializeExpress();
      await this.initializeBot();

      const PORT = env.PORT || 3000;
      this.server = this.app.listen(PORT, this.onServerListening.bind(this));
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
  async onServerListening() {
    Notifier.log(`üöÄ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${env.PORT || 3000}`);
    await this.ensureTelegramConfig();
    this.initializeScheduler();
    this.registerSendCommand();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è TELEGRAM_CHANNEL_ID
  async ensureTelegramConfig() {
    if (!env.TELEGRAM_CHANNEL_ID) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_CHANNEL_ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Scheduler
  initializeScheduler() {
    if (this.scheduler) {
      this.scheduler.cancelSchedule();
    }
    this.scheduler = new Scheduler(this.model, this.bot);

    this.scheduler
      .postQuoteToTelegram(env.TELEGRAM_CHANNEL_ID)
      .catch(err =>
        Notifier.error(err, { module: "Scheduler.postQuoteToTelegram" })
      );

    this.scheduler.schedulePost(env.TELEGRAM_CHANNEL_ID);
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /send –≤ –±–æ—Ç–µ
  registerSendCommand() {
    if (this.sendCommandRegistered) {
      return;
    }
    this.bot.command("send", async ctx => {
      try {
        await this.scheduler.postQuoteToTelegram(env.TELEGRAM_CHANNEL_ID);
        ctx.reply("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
      } catch (error) {
        await Notifier.error(error, { module: "App.sendCommand" });
      } finally {
        Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ command.send.");
      }
    });
    this.sendCommandRegistered = true;
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ MongoDB
  async closeServices() {
    await new Promise((resolve, reject) => {
      if (this.server) {
        this.server.close(err => {
          if (err) {
            Notifier.error(err, { module: "App.closeServices.serverClose" });
            return reject(err instanceof Error ? err : new Error(err));
          }
          resolve();
        });
      } else {
        resolve();
      }
    });

    await new Promise((resolve, reject) => {
      mongoose.connection.close(false, err => {
        if (err) {
          Notifier.error(err, { module: "App.closeServices.mongooseClose" });
          return reject(err instanceof Error ? err : new Error(err));
        }
        resolve();
      });
    });
  }

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  async restart() {
    return App.safeExecute("App.restart", async () => {
      Notifier.log("[INFO] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
      if (this.scheduler) {
        this.scheduler.cancelSchedule();
      }
      if (this.schedulerHealthInterval) {
        clearInterval(this.schedulerHealthInterval);
        this.schedulerHealthInterval = null;
      }
      if (this.bot) {
        try {
          this.bot.stop("restart");
          Notifier.log("[INFO] Telegraf –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.");
        } catch (botError) {
          await Notifier.error(botError, { module: "App.restart.botStop" });
        }
      }
      await this.closeServices();
      Notifier.log("[INFO] –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...");
      await this.startServer();
    });
  }

  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
  async shutdowns() {
    return App.safeExecute("App.shutdowns", async () => {
      Notifier.warn("[WARN] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
      if (this.scheduler) {
        this.scheduler.cancelSchedule();
      }
      if (this.schedulerHealthInterval) {
        clearInterval(this.schedulerHealthInterval);
        this.schedulerHealthInterval = null;
      }
      if (this.bot) {
        try {
          this.bot.stop("shutdown");
          Notifier.log("[INFO] Telegraf –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        } catch (botError) {
          await Notifier.error(botError, { module: "App.shutdowns.botStop" });
        }
      }
      await this.closeServices();
      Notifier.log("[INFO] –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã.");
      process.exit(0);
    });
  }

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π —Å–∏–≥–Ω–∞–ª shutdown
  shutdown() {
    console.log("Ignoring shutdown signal.");
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on("unhandledRejection", reason => {
  Notifier.error(reason, { module: "global unhandledRejection" });
  Notifier.error("[ERROR] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ.");
});
process.on("uncaughtException", error => {
  Notifier.error(error, { module: "global uncaughtException" });
  Notifier.error("[ERROR] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.");
});

module.exports = App;
