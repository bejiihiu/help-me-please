const express = require("express");
const helmet = require("helmet");
const fs = require("fs/promises");
const { webhookPath, env } = require("./config");
const Notifier = require("./utils/Notifier");
const Database = require("./services/Database");
const Scheduler = require("./services/Scheduler");
const setupBot = require("./bot/bot");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const mongoose = require("mongoose");

class App {
  constructor() {
    this.app = express();
    this.server = null;
    this.scheduler = null;
    this.schedulerHealthInterval = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    this.model = null;
    this.bot = null;
  }

  async initializeModel() {
    try {
      Notifier.log("[INFO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏...");
      if (!env.GEMINI_KEY) {
        throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á GEMINI_KEY –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
      }
      const systemInstruction = await fs.readFile("system.txt", "utf-8");
      const genAI = new GoogleGenerativeAI(env.GEMINI_KEY);
      this.model = genAI.getGenerativeModel({
        model: "gemini-2.0-flash-thinking-exp-01-21",
        generationConfig: {
          temperature: 0.9,
          topP: 0.9,
          topK: 40,
          candidateCount: 1,
          responseLogprobs: false,
        },
        systemInstruction,
      });
      Notifier.log("[INFO] –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
    } catch (error) {
      await Notifier.error(error, { module: "App.initializeModel" });
      throw error;
    } finally {
      Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ initializeModel.");
    }
  }

  async initializeExpress() {
    try {
      this.app.use(express.json());
      this.app.use(helmet());
      this.app.get("/", (req, res) => res.send("OK"));
      Notifier.log("[INFO] Express –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å helmet –∏ health-check endpoint.");
    } catch (error) {
      await Notifier.error(error, { module: "App.initializeExpress" });
      throw error;
    } finally {
      Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ initializeExpress.");
    }
  }

  async initializeBot() {
    try {
      this.bot = setupBot(this);
      if (!this.bot || typeof this.bot.webhookCallback !== "function") {
        throw new Error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
      }
      this.app.use(this.bot.webhookCallback(webhookPath));
      Notifier.log("[INFO] Telegraf –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Express.");
    } catch (error) {
      await Notifier.error(error, { module: "App.initializeBot" });
      throw error;
    } finally {
      Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ initializeBot.");
    }
  }

  async startServer() {
    try {
      Notifier.log("[INFO] –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
      await Database.connect();
      await this.initializeModel();
      await this.initializeExpress();
      await this.initializeBot();

      const PORT = env.PORT || 3000;
      this.server = this.app.listen(PORT, async () => {
        try {
          Notifier.log(`üöÄ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
          if (!env.TELEGRAM_CHANNEL_ID) {
            throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_CHANNEL_ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
          }
          // –ï—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
          if (this.scheduler) {
            this.scheduler.cancelSchedule();
          }
          this.scheduler = new Scheduler(this.model, this.bot);
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          await this.scheduler.postQuoteToTelegram(env.TELEGRAM_CHANNEL_ID);
          this.scheduler.schedulePost(env.TELEGRAM_CHANNEL_ID);
          // –ó–∞–ø—É—Å–∫–∞–µ–º health-check –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
          this.schedulerHealthInterval = setInterval(() => {
            if (this.scheduler) {
              this.scheduler.checkHealth();
            }
          }, 5 * 60 * 1000);
        } catch (error) {
          await Notifier.error(error, { module: "App.startServer.listenCallback" });
        } finally {
          Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞ app.listen.");
        }
      });
    } catch (error) {
      await Notifier.error(error, { module: "App.startServer" });
      Notifier.error("[ERROR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...");
      setTimeout(() => this.startServer(), 15000);
    } finally {
      Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ startServer.");
    }
  }

  restart() {
    try {
      Notifier.log("[INFO] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
      if (this.scheduler) {
        this.scheduler.cancelSchedule();
      }
      if (this.schedulerHealthInterval) {
        clearInterval(this.schedulerHealthInterval);
        this.schedulerHealthInterval = null;
      }
      if (this.bot) {
        try {
          this.bot.stop("restart");
          Notifier.log("[INFO] Telegraf –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.");
        } catch (botError) {
          Notifier.error(botError, { module: "App.restart.botStop" });
        }
      }
      if (this.server) {
        this.server.close((err) => {
          if (err) {
            Notifier.error(err, { module: "App.restart.serverClose" });
          }
          mongoose.connection.close(false, async (err) => {
            if (err) {
              Notifier.error(err, { module: "App.restart.mongooseClose" });
            }
            Notifier.log("[INFO] –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...");
            await this.startServer();
          });
        });
      } else {
        this.startServer();
      }
    } catch (error) {
      Notifier.error(error, { module: "App.restart" });
    } finally {
      Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ restart.");
    }
  }

  shutdown() {
    console.log("Ignoring shutdown signal.");
  }

  shutdowns() {
    try {
      Notifier.warn("[WARN] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
      if (this.scheduler) {
        this.scheduler.cancelSchedule();
      }
      if (this.schedulerHealthInterval) {
        clearInterval(this.schedulerHealthInterval);
        this.schedulerHealthInterval = null;
      }
      if (this.bot) {
        try {
          this.bot.stop("shutdown");
          Notifier.log("[INFO] Telegraf –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        } catch (botError) {
          Notifier.error(botError, { module: "App.shutdowns.botStop" });
        }
      }
      if (this.server) {
        this.server.close((err) => {
          if (err) {
            Notifier.error(err, { module: "App.shutdowns.serverClose" });
          }
          mongoose.connection.close(false, (err) => {
            if (err) {
              Notifier.error(err, { module: "App.shutdowns.mongooseClose" });
            }
            Notifier.log("[INFO] –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã.");
            process.exit(0);
          });
        });
      } else {
        process.exit(0);
      }
    } catch (error) {
      Notifier.error(error, { module: "App.shutdowns" });
      process.exit(1);
    } finally {
      Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ shutdowns.");
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on("unhandledRejection", (reason) => {
  Notifier.error(reason, { module: "global unhandledRejection" });
  Notifier.error("[ERROR] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ.");
});
process.on("uncaughtException", (error) => {
  Notifier.error(error, { module: "global uncaughtException" });
  Notifier.error("[ERROR] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.");
  // –í–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
  // process.exit(1);
});

module.exports = App;
