const express = require("express");
const helmet = require("helmet");
const fs = require("fs/promises");
const { webhookPath, env } = require("./config");
const Notifier = require("./utils/Notifier");
const Database = require("./services/Database");
const Scheduler = require("./services/Scheduler");
const setupBot = require("./bot/bot");
const { GoogleGenerativeAI } = require("@google/generative-ai");

class App {
  constructor() {
    this.app = express();
    this.server = null;
    this.scheduler = null;
    this.model = null;
    this.bot = null;
  }

  async initializeModel() {
    try {
      Notifier.log("[INFO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏...");
      const systemInstruction = await fs.readFile("system.txt", "utf-8");
      const genAI = new GoogleGenerativeAI(env.GEMINI_KEY);
      this.model = genAI.getGenerativeModel({
        model: "gemini-2.0-flash-thinking-exp-01-21",
        generationConfig: {
          temperature: 0.9,
          topP: 0.9,
          topK: 40,
          candidateCount: 1,
          responseLogprobs: false,
        },
        systemInstruction,
      });
      Notifier.log("[INFO] –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
    } catch (error) {
      await Notifier.error(error, { module: "App.initializeModel" });
      throw error;
    }
  }

  async initializeExpress() {
    this.app.use(express.json());
    this.app.use(helmet());
    this.app.get("/", (req, res) => res.send("OK"));
    Notifier.log("[INFO] Express –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å helmet –∏ health-check endpoint.");
  }

  async initializeBot() {
    this.bot = setupBot(this);
    this.app.use(this.bot.webhookCallback(webhookPath));
    Notifier.log("[INFO] Telegraf –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Express.");
  }

  async startServer() {
    try {
      Notifier.log("[INFO] –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
      await Database.connect();
      await this.initializeModel();
      await this.initializeExpress();
      await this.initializeBot();

      const PORT = env.PORT || 3000;
      this.server = this.app.listen(PORT, async () => {
        Notifier.log(`üöÄ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        this.scheduler = new Scheduler(this.model, this.bot);
        await this.scheduler.postQuoteToTelegram(env.TELEGRAM_CHANNEL_ID);
        this.scheduler.schedulePost(env.TELEGRAM_CHANNEL_ID);
      });

      const shutdown = () => {
        Notifier.log(
          "[INFO] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...",
        );
        if (this.scheduler && this.scheduler.timeoutId) {
          clearTimeout(this.scheduler.timeoutId);
        }
        if (this.server) {
          this.server.close(() => {
            require("mongoose").connection.close(false, () => {
              Notifier.log("[INFO] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ.");
              process.exit(0);
            });
          });
        }
      };
      process.on("SIGTERM", shutdown);
      process.on("SIGINT", shutdown);
    } catch (error) {
      await Notifier.error(error, { module: "App.startServer" });
      Notifier.error(
        "[ERROR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...",
      );
      setTimeout(() => this.startServer(), 15000);
    }
  }

  restart() {
    Notifier.log("[INFO] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
    if (this.bot) {
      this.bot.stop("restart");
      Notifier.log("[INFO] Telegraf –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.");
    }
    if (this.server) {
      this.server.close(() => {
        require("mongoose").connection.close(false, async () => {
          Notifier.log("[INFO] –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...");
          await this.startServer();
        });
      });
    } else {
      this.startServer();
    }
  }

  shutdown() {
    Notifier.warn("[WARN] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
    if (this.bot) {
      this.bot.stop("shutdown");
      Notifier.log("[INFO] Telegraf –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }
    if (this.server) {
      this.server.close(() => {
        require("mongoose").connection.close(false, () => {
          Notifier.log("[INFO] –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã.");
          process.exit(0);
        });
      });
    } else {
      process.exit(0);
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on("unhandledRejection", (reason) => {
  Notifier.error(reason, { module: "global unhandledRejection" });
  Notifier.error("[ERROR] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ. –ü–æ—Ö—É–π.");
});
process.on("uncaughtException", (error) => {
  Notifier.error(error, { module: "global uncaughtException" });
  Notifier.error("[ERROR] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.");
});

module.exports = App;
