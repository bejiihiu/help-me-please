const fs = require("fs/promises");
const { randomInt } = require("crypto");
const PostModel = require("../models/Post");
const Notifier = require("../utils/Notifier");

class Scheduler {
  constructor(model, bot) {
    this.model = model;
    this.bot = bot;
    this.timeoutId = null;
    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    this.lastScheduledTime = Date.now();
  }

  cancelSchedule() {
    try {
      if (this.timeoutId) {
        clearTimeout(this.timeoutId);
        Notifier.log("[INFO] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        this.timeoutId = null;
      }
    } catch (error) {
      Notifier.error(error, { module: "Scheduler.cancelSchedule" });
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ cancelSchedule –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  static getRandomTime(minMinutes, maxMinutes) {
    try {
      if (minMinutes > maxMinutes) {
        Notifier.warn(
          `[WARN] minMinutes (${minMinutes}) –±–æ–ª—å—à–µ maxMinutes (${maxMinutes}). –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã –º–µ—Å—Ç–∞–º–∏.`,
        );
        [minMinutes, maxMinutes] = [maxMinutes, minMinutes];
      }
      const minMs = minMinutes * 60 * 1000;
      const maxMs = maxMinutes * 60 * 1000;
      const randomDelay = randomInt(minMs, maxMs + 1);
      Notifier.log(
        `[DEBUG] –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏: ${randomDelay} –º—Å (–æ—Ç ${minMinutes} –¥–æ ${maxMinutes} –º–∏–Ω—É—Ç)`,
      );
      return randomDelay;
    } catch (error) {
      Notifier.error(error, { module: "Scheduler.getRandomTime" });
      return 10 * 60 * 1000;
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ getRandomTime –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  static shouldSkipPost() {
    try {
      const skip = randomInt(0, 100) < 10;
      Notifier.log(
        `[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ—Å—Ç–∞: ${skip ? "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º" : "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º"}`,
      );
      return skip;
    } catch (error) {
      Notifier.error(error, { module: "Scheduler.shouldSkipPost" });
      return false;
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ shouldSkipPost –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  static getTimeInterval() {
    try {
      const parsedOffset = parseInt(process.env.TIMEZONE_OFFSET, 10);
      const timezoneOffset = isNaN(parsedOffset) ? 0 : parsedOffset;
      const currentTime = new Date(Date.now() + timezoneOffset * 3600000);
      Notifier.log(
        `[DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º TZ: ${currentTime.toISOString()}`,
      );
      const hour = currentTime.getHours();
      if (hour >= 8 && hour < 16) return [1, 45];
      if (hour >= 16 && hour < 18) return [20, 90];
      if (hour >= 18 && hour < 23) return [45, 120];
      return [120, 300];
    } catch (error) {
      Notifier.error(error, { module: "Scheduler.getTimeInterval" });
      return [120, 300];
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ getTimeInterval –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  static async computeNextPostTime() {
    let nextPost = 0;
    try {
      const [minInterval, maxInterval] = Scheduler.getTimeInterval();
      const postDoc = await PostModel.findById("singleton");
      let lastTime = postDoc?.lastPost || 0;
      nextPost = postDoc?.nextPost || 0;
      const now = Date.now();
      Notifier.log(
        `[DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now}, –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: ${lastTime}, –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: ${nextPost}`,
      );
      if (nextPost && nextPost > now) {
        Notifier.log(
          "[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞.",
        );
        return nextPost;
      }
      let delay = 0;
      if (lastTime) {
        const elapsedMinutes = (now - lastTime) / 60000;
        if (elapsedMinutes < minInterval) {
          delay = (minInterval - elapsedMinutes) * 60000;
          Notifier.log(
            `[INFO] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ (${elapsedMinutes.toFixed(
              2,
            )} –º–∏–Ω). –ü–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ${(delay / 60000).toFixed(2)} –º–∏–Ω.`,
          );
        } else {
          delay = Scheduler.getRandomTime(minInterval, maxInterval);
        }
      } else {
        delay = Scheduler.getRandomTime(minInterval, maxInterval);
        Notifier.log("[INFO] –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç.");
      }
      nextPost = now + delay;
      await PostModel.findByIdAndUpdate(
        "singleton",
        { lastPost: lastTime, nextPost },
        { upsert: true },
      );
      Notifier.log(
        `[DEBUG] –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${new Date(nextPost).toISOString()}`,
      );
      return nextPost;
    } catch (error) {
      await Notifier.error(error, { module: "Scheduler.computeNextPostTime" });
      const fallbackDelay = Scheduler.getRandomTime(10, 15);
      Notifier.warn(
        `[WARN] –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —á–µ—Ä–µ–∑ ${Math.round(
          fallbackDelay / 60000,
        )} –º–∏–Ω—É—Ç.`,
      );
      return Date.now() + fallbackDelay;
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ computeNextPostTime –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  async generateTextFromPrompt(promptPath) {
    let resultText = "";
    try {
      Notifier.log(`[INFO] –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${promptPath}`);
      const prompt = await fs.readFile(promptPath, "utf-8");
      const result = await this.model.generateContentStream(prompt);
      if (
        !result?.stream ||
        typeof result.stream[Symbol.asyncIterator] !== "function"
      ) {
        throw new Error(
          "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä stream",
        );
      }
      for await (const chunk of result.stream) {
        if (typeof chunk.text !== "function") {
          throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞–Ω–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è text()");
        }
        const chunkText = chunk.text();
        resultText += chunkText;
        Notifier.log("[DEBUG] –ü–æ–ª—É—á–µ–Ω CHUNK:", chunkText);
      }
      Notifier.log("[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
      return resultText;
    } catch (error) {
      await Notifier.error(error, {
        module: "Scheduler.generateTextFromPrompt",
      });
      return "";
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ generateTextFromPrompt –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  async postQuoteToTelegram(channelId) {
    try {
      if (!channelId) {
        throw new Error("channelId –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
      }
      Notifier.log("[INFO] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è Telegram.");
      const quote = await this.generateTextFromPrompt("./prompt.txt");
      if (!quote) {
        await Notifier.error("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É.");
        return;
      }
      await this.bot.telegram.sendMessage(channelId, `üíî - ${quote}`);
      Notifier.log("[INFO] ‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –∫–∞–Ω–∞–ª");
    } catch (error) {
      await Notifier.error(error, { module: "Scheduler.postQuoteToTelegram" });
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ postQuoteToTelegram –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  async schedulePost(channelId) {
    try {
      if (!channelId) {
        throw new Error("channelId –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
      }
      if (this.timeoutId) {
        clearTimeout(this.timeoutId);
        this.timeoutId = null;
      }
      const nextPostTime = await Scheduler.computeNextPostTime();
      const delay = Math.max(nextPostTime - Date.now(), 0);
      Notifier.log(
        `[INFO] –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ ${Math.round(delay / 60000)} –º–∏–Ω—É—Ç`,
      );

      this.timeoutId = setTimeout(async () => {
        try {
          if (Scheduler.shouldSkipPost()) {
            Notifier.log(
              "[INFO] üò¥ –ü–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (—Å–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –Ω–µ–±—Ä–µ–∂–Ω–æ—Å—Ç–∏)",
            );
          } else {
            await this.postQuoteToTelegram(channelId);
            await PostModel.findByIdAndUpdate(
              "singleton",
              { lastPost: Date.now(), nextPost: 0 },
              { upsert: true },
            );
            Notifier.log(
              "[INFO] –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            );
          }
        } catch (error) {
          await Notifier.error(error, {
            module: "Scheduler.schedulePost inner",
          });
        } finally {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
          this.lastScheduledTime = Date.now();
          Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.");
          this.schedulePost(channelId);
        }
      }, delay);
    } catch (error) {
      await Notifier.error(error, { module: "Scheduler.schedulePost" });
      const fallbackDelay = Scheduler.getRandomTime(10, 15);
      Notifier.warn(
        `[WARN] –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${Math.round(fallbackDelay / 60000)} –º–∏–Ω—É—Ç.`,
      );
      this.timeoutId = setTimeout(
        () => this.schedulePost(channelId),
        fallbackDelay,
      );
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ schedulePost –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  checkHealth() {
    try {
      const now = Date.now();
      const threshold = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
      if (now - this.lastScheduledTime > threshold) {
        Notifier.warn(
          `[WARN] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: ${new Date(this.lastScheduledTime).toISOString()}`,
        );
      } else {
        Notifier.log(
          `[INFO] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: ${new Date(this.lastScheduledTime).toISOString()}`,
        );
      }
    } catch (error) {
      Notifier.error(error, { module: "Scheduler.checkHealth" });
    } finally {
      Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ checkHealth.");
    }
  }
}

module.exports = Scheduler;
