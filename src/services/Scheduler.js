const fs = require("fs/promises");
const { randomInt } = require("crypto");
const PostModel = require("../models/Post");
const Notifier = require("../utils/Notifier");

class Scheduler {
  constructor(model, bot) {
    Notifier.log("[DEBUG] –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ Scheduler");
    this.model = model;
    Notifier.log("[DEBUG] –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:", model);
    this.bot = bot;
    Notifier.log("[DEBUG] –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", bot);
    this.timeoutId = null;
    Notifier.log("[DEBUG] timeoutId –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ null");
  }

  static getRandomTime(minMinutes, maxMinutes) {
    Notifier.log(`[DEBUG] –í—ã–∑–æ–≤ getRandomTime —Å minMinutes=${minMinutes}, maxMinutes=${maxMinutes}`);
    const minMs = minMinutes * 60 * 1000;
    Notifier.log(`[DEBUG] –í—ã—á–∏—Å–ª–µ–Ω–æ minMs=${minMs}`);
    const maxMs = maxMinutes * 60 * 1000;
    Notifier.log(`[DEBUG] –í—ã—á–∏—Å–ª–µ–Ω–æ maxMs=${maxMs}`);
    const randomDelay = randomInt(minMs, maxMs + 1);
    Notifier.log(`[DEBUG] –í—ã—á–∏—Å–ª–µ–Ω–æ randomDelay=${randomDelay}`);
    Notifier.log(`[DEBUG] –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏: ${randomDelay} –º—Å (–æ—Ç ${minMinutes} –¥–æ ${maxMinutes} –º–∏–Ω—É—Ç)`);
    return randomDelay;
  }

  static shouldSkipPost() {
    Notifier.log("[DEBUG] –í—ã–∑–æ–≤ shouldSkipPost");
    const skip = randomInt(0, 100) < 10;
    Notifier.log(`[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ—Å—Ç–∞: ${skip ? "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º" : "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º"}`);
    return skip;
  }

  static getTimeInterval() {
    Notifier.log("[DEBUG] –í—ã–∑–æ–≤ getTimeInterval");
    const timezoneOffset = process.env.TIMEZONE_OFFSET ? parseInt(process.env.TIMEZONE_OFFSET) : 0;
    Notifier.log(`[DEBUG] –ü–æ–ª—É—á–µ–Ω TIMEZONE_OFFSET: ${timezoneOffset}`);
    const currentTime = Date.now();
    Notifier.log(`[DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (timestamp): ${currentTime}`);
    const localTime = new Date(currentTime + timezoneOffset * 3600000);
    Notifier.log(`[DEBUG] –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º TIMEZONE_OFFSET: ${localTime.toISOString()}`);
    const hour = localTime.getHours();
    Notifier.log(`[DEBUG] –ß–∞—Å: ${hour}`);
    if (hour >= 8 && hour < 12) {
      Notifier.log("[DEBUG] –í—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã [1, 45] –º–∏–Ω—É—Ç");
      return [1, 45];
    }
    if (hour >= 12 && hour < 18) {
      Notifier.log("[DEBUG] –í—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã [20, 90] –º–∏–Ω—É—Ç");
      return [20, 90];
    }
    if (hour >= 18 && hour < 23) {
      Notifier.log("[DEBUG] –í—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã [45, 120] –º–∏–Ω—É—Ç");
      return [45, 120];
    }
    Notifier.log("[DEBUG] –í—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã [120, 300] –º–∏–Ω—É—Ç");
    return [120, 300];
  }

  static async computeNextPostTime() {
    Notifier.log("[DEBUG] –í—ã–∑–æ–≤ computeNextPostTime");
    const [minInterval, maxInterval] = Scheduler.getTimeInterval();
    Notifier.log(`[DEBUG] –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: minInterval=${minInterval} –º–∏–Ω, maxInterval=${maxInterval} –º–∏–Ω`);
    let postDoc;
    try {
      postDoc = await PostModel.findById("singleton");
      Notifier.log(`[DEBUG] –î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${JSON.stringify(postDoc)}`);
    } catch (dbError) {
      await Notifier.error(dbError, { module: "Scheduler.computeNextPostTime", stage: "fetch document" });
      postDoc = null;
    }
    let lastTime = postDoc && postDoc.lastPost ? postDoc.lastPost : 0;
    Notifier.log(`[DEBUG] lastTime=${lastTime}`);
    let nextPost = postDoc && postDoc.nextPost ? postDoc.nextPost : 0;
    Notifier.log(`[DEBUG] nextPost=${nextPost}`);
    const now = Date.now();
    Notifier.log(`[DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è now=${now}`);
    if (nextPost && nextPost > now) {
      Notifier.log("[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞.");
      return nextPost;
    }
    let delay = 0;
    if (lastTime) {
      const elapsedMinutes = (now - lastTime) / 60000;
      Notifier.log(`[DEBUG] –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: ${elapsedMinutes.toFixed(2)} –º–∏–Ω—É—Ç`);
      if (elapsedMinutes < minInterval) {
        delay = (minInterval - elapsedMinutes) * 60000;
        Notifier.log(`[INFO] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ (${elapsedMinutes.toFixed(2)} –º–∏–Ω). –ü–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ${(delay / 60000).toFixed(2)} –º–∏–Ω.`);
      } else {
        delay = Scheduler.getRandomTime(minInterval, maxInterval);
        Notifier.log(`[DEBUG] –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: ${delay} –º—Å`);
      }
    } else {
      delay = Scheduler.getRandomTime(minInterval, maxInterval);
      Notifier.log("[INFO] –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç.");
    }
    nextPost = now + delay;
    Notifier.log(`[DEBUG] –†–∞—Å—á–µ—Ç nextPost=${new Date(nextPost).toISOString()}`);
    try {
      await PostModel.findByIdAndUpdate(
        "singleton",
        { lastPost: lastTime, nextPost },
        { upsert: true }
      );
      Notifier.log("[DEBUG] –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
    } catch (updateError) {
      await Notifier.error(updateError, { module: "Scheduler.computeNextPostTime", stage: "update document" });
    }
    Notifier.log(`[DEBUG] –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${new Date(nextPost).toISOString()}`);
    return nextPost;
  }

  async generateTextFromPrompt(promptPath) {
    Notifier.log(`[DEBUG] –í—ã–∑–æ–≤ generateTextFromPrompt —Å promptPath=${promptPath}`);
    let resultText = "";
    try {
      Notifier.log(`[INFO] –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${promptPath}`);
      const prompt = await fs.readFile(promptPath, "utf-8");
      Notifier.log(`[DEBUG] –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${prompt}`);
      const result = await this.model.generateContentStream(prompt);
      Notifier.log("[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω.");
      if (!result || !result.stream) {
        Notifier.log("[ERROR] –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç stream.");
        return "";
      }
      for await (const chunk of result.stream) {
        const chunkText = chunk.text();
        Notifier.log(`[DEBUG] –û–±—Ä–∞–±–æ—Ç–∞–Ω CHUNK: ${chunkText}`);
        resultText += chunkText;
      }
      Notifier.log("[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç: " + resultText);
      return resultText;
    } catch (error) {
      await Notifier.error(error, { module: "Scheduler.generateTextFromPrompt", promptPath });
      return "";
    }
  }

  async postQuoteToTelegram(channelId) {
    Notifier.log(`[DEBUG] –í—ã–∑–æ–≤ postQuoteToTelegram —Å channelId=${channelId}`);
    try {
      Notifier.log("[INFO] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è Telegram.");
      const quote = await this.generateTextFromPrompt("./prompt.txt");
      Notifier.log(`[DEBUG] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞: ${quote}`);
      if (!quote) {
        await Notifier.error("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É.", { channelId });
        return;
      }
      Notifier.log(`[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram. channelId=${channelId}, message=üíî - ${quote}`);
      await this.bot.telegram.sendMessage(channelId, `üíî - ${quote}`);
      Notifier.log("[INFO] ‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –∫–∞–Ω–∞–ª");
    } catch (error) {
      await Notifier.error(error, { module: "Scheduler.postQuoteToTelegram", channelId });
    }
  }

  async schedulePost(channelId) {
    Notifier.log(`[DEBUG] –í—ã–∑–æ–≤ schedulePost —Å channelId=${channelId}`);
    try {
      Notifier.log("[INFO] –ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞.");
      const nextPostTime = await Scheduler.computeNextPostTime();
      Notifier.log(`[DEBUG] –í—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: ${new Date(nextPostTime).toISOString()}`);
      const now = Date.now();
      Notifier.log(`[DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now}`);
      const delay = Math.max(nextPostTime - now, 0);
      Notifier.log(`[INFO] –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ ${Math.round(delay / 60000)} –º–∏–Ω—É—Ç (–∑–∞–¥–µ—Ä–∂–∫–∞ ${delay} –º—Å)`);
      this.timeoutId = setTimeout(async () => {
        Notifier.log("[DEBUG] –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞");
        try {
          if (Scheduler.shouldSkipPost()) {
            Notifier.log("[INFO] üò¥ –ü–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (—Å–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –Ω–µ–±—Ä–µ–∂–Ω–æ—Å—Ç–∏)");
          } else {
            Notifier.log("[DEBUG] –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞");
            await this.postQuoteToTelegram(channelId);
            Notifier.log("[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞");
            await PostModel.findByIdAndUpdate(
              "singleton",
              { lastPost: Date.now(), nextPost: 0 },
              { upsert: true }
            );
            Notifier.log("[INFO] –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
          }
        } catch (error) {
          await Notifier.error(error, { module: "Scheduler.schedulePost inner", channelId });
        }
        Notifier.log("[DEBUG] –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ schedulePost –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
        this.schedulePost(channelId);
      }, delay);
      Notifier.log("[DEBUG] –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    } catch (error) {
      await Notifier.error(error, { module: "Scheduler.schedulePost", channelId });
      const fallbackDelay = Scheduler.getRandomTime(10, 15);
      Notifier.warn(`[WARN] –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${Math.round(fallbackDelay / 60000)} –º–∏–Ω—É—Ç.`);
      this.timeoutId = setTimeout(() => {
        Notifier.log("[DEBUG] –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–∞—É—Ç–∞ fallback –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞");
        this.schedulePost(channelId);
      }, fallbackDelay);
    }
  }
}

module.exports = Scheduler;