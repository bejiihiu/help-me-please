const fs = require("fs/promises");
const { randomInt } = require("crypto");
const PostModel = require("../models/Post");
const Notifier = require("../utils/Notifier");

class Scheduler {
  constructor(model, bot) {
    this.model = model;
    this.bot = bot;
    this.timeoutId = null;
    this.lastScheduledTime = Date.now();
    this.lastSuccessfulPostTime = Date.now();
    this.channelId = null;
    this.nextPostTime = null;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  static logStart(methodName) {
    Notifier.log(`[DEBUG] –ù–∞—á–∞–ª–æ ${methodName}`);
  }

  static logEnd(methodName) {
    Notifier.log(`[DEBUG] –ú–µ—Ç–æ–¥ ${methodName} –∑–∞–≤–µ—Ä—à—ë–Ω.`);
  }

  static async safeExecute(methodName, fn) {
    Scheduler.logStart(methodName);
    try {
      return await fn();
    } catch (error) {
      await Notifier.error(error, { module: methodName });
      throw error;
    } finally {
      Scheduler.logEnd(methodName);
    }
  }

  cancelSchedule() {
    try {
      if (this.timeoutId) {
        clearTimeout(this.timeoutId);
        Notifier.log("[INFO] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        this.timeoutId = null;
      }
    } catch (error) {
      Notifier.error(error, { module: "Scheduler.cancelSchedule" });
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ cancelSchedule –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ channelId
  static validateChannelId(channelId) {
    if (!channelId || typeof channelId !== "string" || channelId.trim() === "") {
      throw new Error("channelId –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ê–ª–º–∞—Ç—ã (Asia/Almaty)
  static getCurrentTimeAlmaty() {
    return new Date(
      new Date().toLocaleString("en-US", { timeZone: "Asia/Almaty" })
    );
  }

  static getRandomTime(minMinutes, maxMinutes) {
    return Scheduler.safeExecute("Scheduler.getRandomTime", async () => {
      if (minMinutes < 0 || maxMinutes < 0) {
        Notifier.warn("[WARN] minMinutes –∏–ª–∏ maxMinutes –º–µ–Ω—å—à–µ 0. –ü—Ä–∏–≤–æ–¥–∏–º –∫ 0.");
        minMinutes = Math.max(minMinutes, 0);
        maxMinutes = Math.max(maxMinutes, 0);
      }
      if (minMinutes > maxMinutes) {
        Notifier.warn(
          `[WARN] minMinutes (${minMinutes}) –±–æ–ª—å—à–µ maxMinutes (${maxMinutes}). –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã –º–µ—Å—Ç–∞–º–∏.`
        );
        [minMinutes, maxMinutes] = [maxMinutes, minMinutes];
      }
      const minMs = minMinutes * 60 * 1000;
      const maxMs = maxMinutes * 60 * 1000;
      const randomDelay = randomInt(minMs, maxMs + 1);
      Notifier.log(
        `[DEBUG] –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏: ${randomDelay} –º—Å (–æ—Ç ${minMinutes} –¥–æ ${maxMinutes} –º–∏–Ω—É—Ç)`
      );
      return randomDelay;
    });
  }

  static shouldSkipPost() {
    try {
      const skip = randomInt(0, 100) < 10;
      Notifier.log(
        `[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ—Å—Ç–∞: ${skip ? "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º" : "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º"}`
      );
      return skip;
    } catch (error) {
      Notifier.error(error, { module: "Scheduler.shouldSkipPost" });
      return false;
    } finally {
      Notifier.log("[DEBUG] –ú–µ—Ç–æ–¥ shouldSkipPost –∑–∞–≤–µ—Ä—à—ë–Ω.");
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ê–ª–º–∞—Ç—ã (Asia/Almaty)
  static getTimeInterval() {
    return Scheduler.safeExecute("Scheduler.getTimeInterval", async () => {
      const currentTime = Scheduler.getCurrentTimeAlmaty();
      const hour = currentTime.getHours();
      Notifier.log(
        `[DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ê–ª–º–∞—Ç—ã (Asia/Almaty): ${currentTime.toISOString()}, —á–∞—Å: ${hour}`
      );
      if (hour >= 8 && hour < 16) return [5, 45];
      if (hour >= 16 && hour < 18) return [20, 90];
      if (hour >= 18 && hour < 23) return [45, 120];
      return [5, 45];
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ
  static async updatePostRecord(lastPost, nextPost) {
    return Scheduler.safeExecute("Scheduler.updatePostRecord", async () => {
      await PostModel.findByIdAndUpdate(
        "singleton",
        { lastPost, nextPost },
        { upsert: true }
      );
      Notifier.log(
        `[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –ø–æ—Å—Ç–∞: lastPost=${lastPost}, nextPost=${nextPost}`
      );
    });
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —á–∞–Ω–∫–∞
  static extractChunkText(chunk) {
    if (typeof chunk.text === "function") {
      return chunk.text();
    } else if (typeof chunk.text === "string") {
      return chunk.text;
    } else {
      throw new Error(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞–Ω–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è text() –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ text"
      );
    }
  }

  // –ú–∏–∫—Ä–æ—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç
  static async calculateDelay(lastTime) {
    const now = Date.now();
    const [minInterval, maxInterval] = await Scheduler.getTimeInterval();
    if (lastTime) {
      const elapsedMinutes = (now - lastTime) / 60000;
      if (elapsedMinutes < minInterval) {
        const delay = (minInterval - elapsedMinutes) * 60000;
        Notifier.log(
          `[INFO] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ (${elapsedMinutes.toFixed(
            2
          )} –º–∏–Ω). –ü–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ${(delay / 60000).toFixed(2)} –º–∏–Ω.`
        );
        return delay;
      } else {
        return Scheduler.getRandomTime(minInterval, maxInterval);
      }
    } else {
      Notifier.log("[INFO] –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç.");
      return Scheduler.getRandomTime(minInterval, maxInterval);
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
  static async computeNextPostTime() {
    return Scheduler.safeExecute("Scheduler.computeNextPostTime", async () => {
      const postDoc = await PostModel.findById("singleton");
      const lastTime = postDoc?.lastPost || 0;
      let nextPost = postDoc?.nextPost || 0;
      const now = Date.now();
      Notifier.log(
        `[DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now}, –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: ${lastTime}, –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: ${nextPost}`
      );
      if (nextPost && nextPost > now) {
        Notifier.log("[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞.");
        return nextPost;
      }
      const delay = await Scheduler.calculateDelay(lastTime);
      nextPost = now + delay;
      await Scheduler.updatePostRecord(lastTime, nextPost);
      Notifier.log(
        `[DEBUG] –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${new Date(nextPost).toISOString()}`
      );
      return nextPost;
    });
  }

  async generateTextFromPrompt(promptPath) {
    return Scheduler.safeExecute("Scheduler.generateTextFromPrompt", async () => {
      Notifier.log(`[INFO] –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${promptPath}`);
      const prompt = await fs.readFile(promptPath, "utf-8");
      const result = await this.model.generateContentStream(prompt);
      if (
        !result?.stream ||
        typeof result.stream[Symbol.asyncIterator] !== "function"
      ) {
        throw new Error(
          "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä stream"
        );
      }
      let resultText = "";
      for await (const chunk of result.stream) {
        const chunkText = Scheduler.extractChunkText(chunk);
        resultText += chunkText;
        Notifier.log("[DEBUG] –ü–æ–ª—É—á–µ–Ω CHUNK:", chunkText);
      }
      Notifier.log("[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
      return resultText;
    });
  }

  async postQuoteToTelegram(channelId) {
    return Scheduler.safeExecute("Scheduler.postQuoteToTelegram", async () => {
      Scheduler.validateChannelId(channelId);
      Notifier.log("[INFO] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è Telegram.");
      const quote = await this.generateTextFromPrompt("./prompt.txt");
      if (!quote) {
        throw new Error("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É.");
      }
      await this.bot.telegram.sendMessage(channelId, `üíî - ${quote}`);
      Notifier.log("[INFO] ‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –∫–∞–Ω–∞–ª");
    });
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
  async _handleScheduledPost() {
    return Scheduler.safeExecute("Scheduler._handleScheduledPost", async () => {
      if (Scheduler.shouldSkipPost()) {
        Notifier.log("[INFO] üò¥ –ü–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (—Å–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –Ω–µ–±—Ä–µ–∂–Ω–æ—Å—Ç–∏)");
      } else {
        await this.postQuoteToTelegram(this.channelId);
        await Scheduler.updatePostRecord(Date.now(), 0);
        Notifier.log("[INFO] –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
      }
      this.lastSuccessfulPostTime = Date.now();
    });
  }

  async schedulePost(channelId) {
    return Scheduler.safeExecute("Scheduler.schedulePost", async () => {
      Scheduler.validateChannelId(channelId);
      this.channelId = channelId;
      if (this.timeoutId) {
        clearTimeout(this.timeoutId);
        this.timeoutId = null;
      }
      const nextPostTime = await Scheduler.computeNextPostTime();
      this.nextPostTime = nextPostTime;
      const delay = Math.max(nextPostTime - Date.now(), 0);
      Notifier.log(
        `[INFO] –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ ${Math.round(delay / 60000)} –º–∏–Ω—É—Ç`
      );
      this.timeoutId = setTimeout(async () => {
        try {
          await this._handleScheduledPost();
        } catch (error) {
          await Notifier.error(error, { module: "Scheduler.schedulePost inner" });
        } finally {
          this.lastScheduledTime = Date.now();
          Notifier.log("[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.");
          await this.schedulePost(channelId);
        }
      }, delay);
    });
  }

  async forcePost(channelId) {
    return Scheduler.safeExecute("Scheduler.forcePost", async () => {
      Scheduler.validateChannelId(channelId);
      await Scheduler.updatePostRecord(Date.now(), 0);
      Notifier.log("[INFO] –°—á—ë—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω. –ó–∞–ø–∏—Å—å –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
      await this.postQuoteToTelegram(channelId);
      this.lastSuccessfulPostTime = Date.now();
      Notifier.log("[INFO] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
      await this.schedulePost(channelId);
    });
  }

  async checkHealth() {
    return Scheduler.safeExecute("Scheduler.checkHealth", async () => {
      const now = Date.now();
      const threshold = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
      let healthy = true;
      if (
        this.nextPostTime &&
        now > this.nextPostTime + threshold &&
        this.lastSuccessfulPostTime < this.nextPostTime
      ) {
        Notifier.warn(
          `[WARN] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—Å—Ç–∞—ë—Ç –æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è ${new Date(
            this.nextPostTime
          ).toISOString()} –ø—Ä–æ—à–ª–æ, –∞ —Ü–∏—Ç–∞—Ç–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`
        );
        healthy = false;
      } else if (!this.nextPostTime && now - this.lastSuccessfulPostTime > threshold) {
        Notifier.warn(
          `[WARN] –¶–∏—Ç–∞—Ç–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –±–æ–ª–µ–µ ${threshold / 60000} –º–∏–Ω—É—Ç.`
        );
        healthy = false;
      }
      if (!healthy) {
        Notifier.warn(
          `[WARN] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞. –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.`
        );
        this.cancelSchedule();
        if (this.channelId) {
          await this.schedulePost(this.channelId);
          Notifier.log("[INFO] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
        } else {
          Notifier.warn(
            "[WARN] channelId –Ω–µ –∑–∞–¥–∞–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
          );
        }
      } else {
        Notifier.log(
          `[INFO] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${
            this.nextPostTime ? new Date(this.nextPostTime).toISOString() : "–Ω–µ –∑–∞–¥–∞–Ω–æ"
          }, –ø–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${new Date(this.lastSuccessfulPostTime).toISOString()}`
        );
      }
      return healthy;
    });
  }
}

module.exports = Scheduler;