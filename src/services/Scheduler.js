const fs = require("fs/promises");
const { randomInt } = require("crypto");
const PostModel = require("../models/Post");
const Notifier = require("../utils/Notifier");

class Scheduler {
  #timeoutId = null;
  #channelId = null;
  #nextPostTime = null;

  /**
   * @param {object} model ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param {object} bot ‚Äî —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
   */
  constructor(model, bot) {
    this.model = model;
    this.bot = bot;
    this.lastSuccessfulPostTime = Date.now();
  }

  // ‚Äî‚Äî‚Äî –£—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî
  static logDebug(message) {
    Notifier.log(`[DEBUG] ${message}`);
  }

  static logInfo(message) {
    Notifier.log(`[INFO] ${message}`);
  }

  static async logError(moduleName, error) {
    await Notifier.error(error, { module: moduleName });
  }

  // ‚Äî‚Äî‚Äî –í–∞–ª–∏–¥–∞—Ü–∏—è ID –∫–∞–Ω–∞–ª–∞ ‚Äî‚Äî‚Äî
  static ensureChannelId(channelId) {
    if (!channelId || typeof channelId !== "string" || !channelId.trim()) {
      throw new Error("channelId –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
    }
  }

  // ‚Äî‚Äî‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–æ–Ω–µ Asia/Almaty ‚Äî‚Äî‚Äî
  static getCurrentTimeAlmaty() {
    const now = new Date();
    const fmt = new Intl.DateTimeFormat("en-CA", {
      timeZone: "Asia/Almaty",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      hour12: false,
    });
    // —Ñ–æ—Ä–º–∞—Ç en-CA: YYYY‚ÄëMM‚ÄëDD, HH:MM:SS
    const [datePart, timePart] = fmt.format(now).split(", ");
    return new Date(`${datePart}T${timePart}`);
  }

  // ‚Äî‚Äî‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É min –∏ max –º–∏–Ω—É—Ç–∞–º–∏ ‚Äî‚Äî‚Äî
  static async getRandomDelay(minMinutes = 0, maxMinutes = 0) {
    try {
      if (minMinutes < 0 || maxMinutes < 0) {
        Scheduler.logDebug("minMinutes –∏–ª–∏ maxMinutes < 0 ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ 0");
        minMinutes = Math.max(0, minMinutes);
        maxMinutes = Math.max(0, maxMinutes);
      }
      if (minMinutes > maxMinutes) {
        Scheduler.logDebug(
          `minMinutes > maxMinutes ‚Äî –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ (${minMinutes}‚Üî${maxMinutes})`
        );
        [minMinutes, maxMinutes] = [maxMinutes, minMinutes];
      }
      const minMs = minMinutes * 60_000;
      const maxMs = maxMinutes * 60_000;
      const delay = randomInt(minMs, maxMs + 1);
      Scheduler.logDebug(`–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${delay}‚ÄØ–º—Å`);
      return delay;
    } catch (err) {
      await Scheduler.logError("Scheduler.getRandomDelay", err);
      return 0;
    }
  }

  // ‚Äî‚Äî‚Äî –®–∞–Ω—Å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç (10%) ‚Äî‚Äî‚Äî
  static shouldSkipPost() {
    try {
      const skip = randomInt(0, 100) < 10;
      Scheduler.logDebug(`shouldSkipPost ‚Üí ${skip}`);
      return skip;
    } catch (err) {
      Notifier.error(err, { module: "Scheduler.shouldSkipPost" });
      return false;
    }
  }

  // ‚Äî‚Äî‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (min, max) –≤ –º–∏–Ω—É—Ç–∞—Ö –ø–æ —á–∞—Å–∞–º –ê–ª–º–∞—Ç—ã ‚Äî‚Äî‚Äî
  static async getTimeInterval() {
    try {
      const nowALM = Scheduler.getCurrentTimeAlmaty();
      const h = nowALM.getHours();
      Scheduler.logDebug(`Almaty time ${nowALM.toISOString()} (hour=${h})`);
      if (h >= 8 && h < 16) return [5, 45];
      if (h >= 16 && h < 18) return [20, 90];
      if (h >= 18 && h < 23) return [45, 120];
      return [5, 45];
    } catch (err) {
      await Scheduler.logError("Scheduler.getTimeInterval", err);
      return [5, 45];
    }
  }

  // ‚Äî‚Äî‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ë–î (upsert) ‚Äî‚Äî‚Äî
  static async updatePostRecord(lastPost, nextPost) {
    try {
      await PostModel.findByIdAndUpdate(
        "singleton",
        { lastPost, nextPost },
        { upsert: true }
      );
      Scheduler.logDebug(`PostRecord updated: last=${lastPost}, next=${nextPost}`);
    } catch (err) {
      await Scheduler.logError("Scheduler.updatePostRecord", err);
    }
  }

  // ‚Äî‚Äî‚Äî –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞–Ω–∫–∞ —Å—Ç—Ä–∏–º–∞ ‚Äî‚Äî‚Äî
  static extractChunkText(chunk) {
    if (typeof chunk.text === "function") return chunk.text();
    if (typeof chunk.text === "string") return chunk.text;
    throw new Error("Chunk –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –∏–ª–∏ –º–µ—Ç–æ–¥–∞ text()");
  }

  // ‚Äî‚Äî‚Äî –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ (unix‚ÄØms) ‚Äî‚Äî‚Äî
  static async computeNextPostTime() {
    try {
      const doc = await PostModel.findById("singleton");
      const last = doc?.lastPost ?? 0;
      let next = doc?.nextPost ?? 0;
      const now = Date.now();

      Scheduler.logDebug(`computeNextPostTime now=${now}, last=${last}, next=${next}`);

      if (next > now) {
        Scheduler.logInfo("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–Ω–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è");
        return next;
      }

      const [min, max] = await Scheduler.getTimeInterval();
      const delay = await Scheduler.getRandomDelay(min, max);
      next = now + delay;

      await Scheduler.updatePostRecord(last, next);
      Scheduler.logDebug(`New nextPostTime=${new Date(next).toISOString()}`);
      return next;
    } catch (err) {
      await Scheduler.logError("Scheduler.computeNextPostTime", err);
      throw err;
    }
  }

  // ‚Äî‚Äî‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞ (stream) ‚Äî‚Äî‚Äî
  async generateTextFromPrompt(promptPath) {
    try {
      Scheduler.logInfo(`–ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç: ${promptPath}`);
      const prompt = await fs.readFile(promptPath, "utf-8");
      const result = await this.model.generateContentStream(prompt);

      if (!result?.stream?.[Symbol.asyncIterator]) {
        throw new Error("stream –Ω–µ—Ç –∏–ª–∏ –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä");
      }

      let text = "";
      for await (const chunk of result.stream) {
        const t = Scheduler.extractChunkText(chunk);
        await this.bot.telegram.sendMessage(6153453766, `New chunk: ${t}`, {
          parse_mode: "HTML"
        });
        text += t;
      }
      Scheduler.logInfo("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      return text;
    } catch (err) {
      await Scheduler.logError("Scheduler.generateTextFromPrompt", err);
      return "";
    }
  }

  // ‚Äî‚Äî‚Äî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ‚Äî‚Äî‚Äî
  async postQuoteToTelegram(channelId) {
    try {
      Scheduler.ensureChannelId(channelId);
      Scheduler.logInfo("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è Telegram");
      const quote = await this.generateTextFromPrompt("./prompt.txt");
      if (!quote) throw new Error("–ü—É—Å—Ç–∞—è —Ü–∏—Ç–∞—Ç–∞");
      await this.bot.telegram.sendMessage(channelId, quote, { parse_mode: "HTML" });
      Scheduler.logInfo("–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ");
    } catch (err) {
      await Scheduler.logError("Scheduler.postQuoteToTelegram", err);
      throw err;
    }
  }

  // ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–Ω–æ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ ‚Äî‚Äî‚Äî
  async _handleScheduledPost() {
    try {
      if (Scheduler.shouldSkipPost()) {
        Scheduler.logInfo("üò¥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç");
      } else {
        await this.postQuoteToTelegram(this.#channelId);
        await Scheduler.updatePostRecord(Date.now(), 0);
        Scheduler.logInfo("lastPost –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î");
      }
      this.lastSuccessfulPostTime = Date.now();
    } catch (err) {
      await Scheduler.logError("Scheduler._handleScheduledPost", err);
    }
  }

  /**
   * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª –ø–æ—Å—Ç–∏–Ω–≥–∞
   * @param {string} channelId
   */
  async schedulePost(channelId) {
    try {
      Scheduler.ensureChannelId(channelId);
      this.#channelId = channelId;

      if (this.#timeoutId) clearTimeout(this.#timeoutId);

      this.#nextPostTime = await Scheduler.computeNextPostTime();
      const delay = Math.max(this.#nextPostTime - Date.now(), 0);

      Scheduler.logInfo(`–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ ${Math.round(delay / 60000)}‚ÄØ–º–∏–Ω.`);
      this.#timeoutId = setTimeout(async () => {
        await this._handleScheduledPost();
        // –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        await this.schedulePost(channelId);
      }, delay);
    } catch (err) {
      await Scheduler.logError("Scheduler.schedulePost", err);
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
   * @param {string} channelId
   */
  async forcePost(channelId) {
    try {
      Scheduler.ensureChannelId(channelId);
      await Scheduler.updatePostRecord(Date.now(), 0);
      Scheduler.logInfo("–°—á—ë—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω");
      await this.postQuoteToTelegram(channelId);
      this.lastSuccessfulPostTime = Date.now();
      Scheduler.logInfo("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
      await this.schedulePost(channelId);
    } catch (err) {
      await Scheduler.logError("Scheduler.forcePost", err);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ¬´–∑–¥–æ—Ä–æ–≤—å–µ¬ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ —Å–±–æ–π
   * @returns {boolean} ‚Äî true, –µ—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
   */
  async checkHealth() {
    const now = Date.now();
    const grace = 10 * 60_000; // 10‚ÄØ–º–∏–Ω
    let healthy = true;

    if (
      this.#nextPostTime &&
      now > this.#nextPostTime + grace &&
      this.lastSuccessfulPostTime < this.#nextPostTime
    ) {
      Scheduler.logInfo("–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—Å—Ç–∞—ë—Ç –æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
      healthy = false;
    } else if (
      !this.#nextPostTime &&
      now - this.lastSuccessfulPostTime > grace
    ) {
      Scheduler.logInfo("—Ü–∏—Ç–∞—Ç–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –±–æ–ª–µ–µ 10‚ÄØ–º–∏–Ω");
      healthy = false;
    }

    if (!healthy) {
      Scheduler.logInfo("–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫");
      clearTimeout(this.#timeoutId);
      if (this.#channelId) {
        await this.schedulePost(this.#channelId);
        Scheduler.logInfo("–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
      } else {
        Scheduler.logInfo("–Ω–µ—Ç channelId ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è");
      }
    } else {
      Scheduler.logDebug(
        `–∑–¥–æ—Ä–æ–≤—å–µ OK; next=${new Date(this.#nextPostTime).toISOString()}, lastOK=${new Date(
          this.lastSuccessfulPostTime
        ).toISOString()}`
      );
    }

    return healthy;
  }

  /** –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ */
  cancelSchedule() {
    if (this.#timeoutId) {
      clearTimeout(this.#timeoutId);
      this.#timeoutId = null;
      Scheduler.logInfo("—Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω");
    }
  }
}

module.exports = Scheduler;
